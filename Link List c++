/*
linked list 
covers - 
1) creation of ll
2) insert data in ll
3) check is it circular ll
4) finding loop using map and floyd algorithm
5) finding starting point in a loop
6) removing loop in ll

*/



#include<iostream>
#include<map>
using namespace std;

class Node{
    public:

    int data;
    Node* next;
    Node( int d){
     this -> data = d;
     this -> next = NULL;
    }
    ~Node(){
        int value = this -> data;
        if (this -> next != NULL){
            delete next;
            this -> next = NULL;
            }
    }};
    

    void insertAthead( Node* &head, int value){
        Node* temp = new Node(value);
        temp -> next = head;
        head = temp;

    }

    void insertAttail( Node* &tail, int value){
        Node* temp = new Node(value);
        tail ->next = temp;
        tail = temp;

    }

    void printnfo(Node* &head ){
        if (head == NULL){
            cout<<"empty"<<endl;}
        Node* temp = head;
        while (temp != NULL){
            cout<< temp -> data<< " ";
            temp= temp -> next;
        }
    }
    
    void insertatposi( Node* &tail, Node* &head, int posi, int value){
        if (posi == 1){
            insertAthead(head, value);
            return;
        }
        Node* temp = head;
        int cou = 1;
        while(cou< posi-1 ){
            temp= temp ->next;
            cou++;
        }
        if( temp -> next == NULL){
            insertAttail(tail, value);
            return;
        }
        Node* nodetoinsert= new Node(value);
        nodetoinsert -> next = temp ->next;
        temp -> next= nodetoinsert;
    }

    void deleteatposi(Node* &head, int posi){
        if(posi == 1){
            Node* temp = head;
            head = head -> next;
            temp -> next = NULL;
            delete temp;
        }
        else{
            Node* curr= head;
            Node* prev = NULL;
            int cou= 1;
            while( cou < posi){
                prev =curr;
                curr= curr -> next;
                cou++;
            }
            prev -> next = curr ->next;
            curr ->next = NULL;
            delete curr;
        }
    }

    bool circheck(Node* head){
        if (head == NULL){
            return true;
        }
        Node* temp = head -> next;
        while( temp != NULL && temp!= head){
            temp = temp ->next;
        }
        if (temp == head){
            cout<< 1;
            return true;

        }
        
        return false;
    }
   

    
bool detectLoop(Node* head) {

    if(head == NULL)
        return false;

    map<Node*, bool> visited;

    Node* temp = head;

    while(temp !=NULL) {

        //cycle is present
        if(visited[temp] == true) {

            cout << "Present on element " << temp->data << endl;
            return true;
        }

        visited[temp] = true;
        temp = temp -> next;

    }
    return false;

}

    Node* floyddetectedcycle(Node* head){
        if (head == NULL){
            return NULL;
        }
        Node* slow =  head;
        Node* fast = head;
        while(slow != NULL && fast!= NULL){
            fast = fast -> next;
            if (fast !=NULL){
                fast= fast ->next;
            }
            slow = slow -> next;
            if(slow == fast){
                return slow; 
            } 
        }
        return NULL;
        }
    
    Node* startingpoint(Node* head){
        if (head == NULL)
            return NULL;
        Node* slow = head;
        Node* intersectionpoint= floyddetectedcycle(head);
        while(slow != intersectionpoint){
            slow = slow ->next;
            intersectionpoint= intersectionpoint->next;
        }
        return slow;

    }

    void removeloop(Node* head){
        if (head == NULL)
            return ;
        Node* startpoint = startingpoint(head);
        Node * temp = startpoint;
        while(temp ->next != startpoint){
            temp= temp -> next;
        }
        temp ->next = NULL;

    }


int main()
{

    Node* n1= new Node(3);
    Node* head = n1;
    Node* tail=  n1;
    printnfo(head);
    cout<<"\n";

    insertAthead(head, 2);
    printnfo(head);
    cout<<"\n";
    
    insertAttail(tail,4);
    printnfo(head);
    cout<<"\n";

    insertatposi(tail, head, 1, 1);
    printnfo(head);
    cout<<"\n";

    insertatposi(tail, head, 3, 5);
    printnfo(head);
    cout<<"\n";

    deleteatposi(head, 3);
    printnfo(head);
    cout<<"\n";

    tail ->next = head ->next;

    if(detectLoop(head)== 0){
        cout<<"No loop present"<<endl;
    }
    if (floyddetectedcycle(head) != NULL) {           
        cout<<"loop is present "<< endl;
    }

    else{
        cout<<"floyd No loop present"<<endl;
    }

    Node* loop = startingpoint(head);

    cout << "loop starts at " << loop -> data  << endl;    

    removeloop(head);

     if (floyddetectedcycle(head) != NULL) {           
        cout<<"loop is present "<< endl;
    }

    else{
        cout<<"floyd No loop present"<<endl;
    }
    


    return 0;

}
